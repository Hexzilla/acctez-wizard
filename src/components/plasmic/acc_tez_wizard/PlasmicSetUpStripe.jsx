// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 68wGqrWvUbUk9uG76N3xHk
// Component: UDeAWj7UYyA
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: UzcYFC-NJii/component
import Button from "../../Button"; // plasmic-import: UCG438gq_ly/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: 68wGqrWvUbUk9uG76N3xHk/projectcss
import sty from "./PlasmicSetUpStripe.module.css"; // plasmic-import: UDeAWj7UYyA/css
import WizardSvgrepoComsvg2Icon from "../blank_project/icons/PlasmicIcon__WizardSvgrepoComsvg2"; // plasmic-import: ppcK-LiUA7/icon
import screenShot20220619At70250PMpngCyEWdgYSm from "../blank_project/images/screenShot20220619At70250PMpng.png"; // plasmic-import: cyEWdgYSm/picture

export const PlasmicSetUpStripe__VariantProps = new Array();

export const PlasmicSetUpStripe__ArgProps = new Array();

export const defaultSetUpStripe__Args = {};

function PlasmicSetUpStripe__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultSetUpStripe__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox___4KtxO)} />

          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            <div className={classNames(projectcss.all, sty.column__axvrP)}>
              <div className={classNames(projectcss.all, sty.freeBox__cPkYg)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___88Hwr)}
                >
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"Choose Your Passes"}
                  </h1>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2QSq
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "Acctez allows your users to purchase passes using their credit card via Stripe. \n\nYou will need to enter you Stripe API Key so that the funds are sent to your account. \n\nFor help getting your Stripe API key, "
                        }
                      </React.Fragment>
                      <a
                        data-plasmic-name={"link"}
                        data-plasmic-override={overrides.link}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link
                        )}
                        href={"https://stripe.com/docs/keys"}
                      >
                        {"this guide"}
                      </a>
                      <React.Fragment>
                        {
                          " will help you.\n\nYou may skip this step if you want to accept payment in Tezos.\n"
                        }
                      </React.Fragment>
                    </React.Fragment>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jqH0Z
                    )}
                  >
                    {"Please Enter your Stripe API Key here:"}
                  </div>

                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    className={classNames("__wab_instance", sty.textInput)}
                  />
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__lczIr)}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button__uW7Be)}
                    color={"link"}
                  >
                    {"Skip"}
                  </Button>

                  <div
                    className={classNames(projectcss.all, sty.freeBox___71Q2H)}
                  />

                  <Button
                    className={classNames("__wab_instance", sty.button__bnQvK)}
                  >
                    {"Back"}
                  </Button>

                  <Button
                    className={classNames("__wab_instance", sty.button___8YLpr)}
                  >
                    {"Next"}
                  </Button>
                </p.Stack>
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.column__tthY)}>
              <div className={classNames(projectcss.all, sty.freeBox__l3PZc)}>
                <WizardSvgrepoComsvg2Icon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xKlCk
                  )}
                >
                  {"AccTez Wizard"}
                </div>

                <p.PlasmicImg
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: screenShot20220619At70250PMpngCyEWdgYSm,
                    fullWidth: 627,
                    fullHeight: 419,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "columns", "h1", "link", "textInput", "textbox", "svg", "img"],
  columns: ["columns", "h1", "link", "textInput", "textbox", "svg", "img"],
  h1: ["h1"],
  link: ["link"],
  textInput: ["textInput", "textbox"],
  svg: ["svg"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSetUpStripe__ArgProps,
      internalVariantPropNames: PlasmicSetUpStripe__VariantProps
    });

    return PlasmicSetUpStripe__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSetUpStripe";
  } else {
    func.displayName = `PlasmicSetUpStripe.${nodeName}`;
  }
  return func;
}

export const PlasmicSetUpStripe = Object.assign(
  // Top-level PlasmicSetUpStripe renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    h1: makeNodeComponent("h1"),
    link: makeNodeComponent("link"),
    textInput: makeNodeComponent("textInput"),
    svg: makeNodeComponent("svg"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicSetUpStripe
    internalVariantProps: PlasmicSetUpStripe__VariantProps,
    internalArgProps: PlasmicSetUpStripe__ArgProps
  }
);

export default PlasmicSetUpStripe;
/* prettier-ignore-end */
